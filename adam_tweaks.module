<?php
/**
 * @file
 * TODO: Enter file description here.
 */

/**
 * Implements hook_link_post_default_validate()
 */

/**
 * Implements hook_help().
 */
function adam_tweaks_help($path, $arg) {
  switch ($path) {
    case 'admin/help#adam_tweaks':
      return t("random help text");
    // OPTIONAL: Add additional cases for other paths that should display help text.
  }
}

/**
 * Implements hook_menu().
 */
function adam_tweaks_menu() { 
  $items['admin/config/system/adam_tweaks'] = array(
    'title' => 'Adam Teaks Administration Page',
    'description' => 'A collection of useful tweaks and changes for the site in the correct Drupal way that are two small to have a module devoted to them.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('adam_tweaks_admin_form'),
    'access arguments' => array('administer comments'),
  );
  $items['comment/%/fastdelete/%'] = array(
    'title' => 'Fast Comment Deletion',
    'page callback' => 'adam_tweaks_comment_fastdelete',
    'page arguments' => array(1, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Admin form
 */
function adam_tweaks_admin_form($form, &$form_state) {
  $form['adam_tweaks_twitter_image'] = array(
    '#type' => 'textfield',
    '#title' => t('Twitter Image'),
    '#description' => t('Twitter image for the twitter block.'),
    '#default_value' => variable_get('adam_tweaks_twitter_image', NULL),
  );
  $form['adam_tweaks_twitter_image_preview'] = array(
    '#type' => 'markup',
    '#title' => t('Preview Image'),
    '#markup' => '<p><img src="' . variable_get('adam_tweaks_twitter_image', NULL) . '" /></p>',
  );
  return system_settings_form($form);
}
/*
function adam_tweaks_admin_form_validate($form, &$form_state) {
  // Have to put the protocols back into an array.
  $form_state['values']['filter_allowed_protocols'] = explode(' ', $form_state['values']['filter_allowed_protocols']);
}
*/

/**
 * Authentication function for menu callback determining if the
 * comment should be deleted
 */
function adam_tweaks_comment_fastdelete($cid, $hash) {
  $comment = comment_load($cid);
  // First check to see if the comment actually exists
  if ($comment) {
    // Add in a timeout so the comment can be deleted only in the
    // first 24 hours after posting.
    $timeout = variable_get('user_password_reset_timeout', 86400);
    $current = REQUEST_TIME;
    if ($current - $timeout > $comment->created) {
      drupal_set_message(t('You have tried to use a comment delete link that has expired. To have the comment deleted please contact the site administrator.'), 'warning');
      drupal_goto('contact-me');
    }
    else {
      $author = adam_tweaks_node_author_pass_from_cid($cid);
      if ($hash == user_pass_rehash($cid, $comment->created, $author->pass) && $current >= $comment->created) {
        watchdog('Adam Tweaks', 'Comment Autodelete link used', array(), WATCHDOG_NOTICE);
        comment_delete($cid);
        drupal_set_message('Comment successfully deleted!');
        drupal_goto('node/' . $comment->nid);
      }
      else {
        drupal_set_message('You have tried to use an invalid comment deletion link.', 'warning');
        drupal_goto('node/' . $comment->nid);
      }
    }
  }
  else {
    drupal_set_message('You have tried to use an invalid comment deletion link.', 'warning');
    drupal_goto('');
  }
}

/**
 * Generates the deletion link for a specific comment.
 */
function adam_tweaks_comment_fastdelete_link($cid) {
  $comment = comment_load($cid);
  $author = adam_tweaks_node_author_pass_from_cid($cid);
  return url("comment/$cid/fastdelete/" . user_pass_rehash($cid, $comment->created, $author->pass), array('absolute' => TRUE));
}

/**
 * returns the hashed password of the node author the comment is posted on.
 * used for an unknown part of the hash that an anonymous user could not guess
 */
function adam_tweaks_node_author_pass_from_cid($cid) {
  $result = db_query('SELECT u.pass FROM {comment} c JOIN {node} n on n.nid = c.nid JOIN {users} u ON n.uid = u.uid WHERE c.cid = :cid', array(':cid' => $cid));
  return $result->fetchObject();
}

/**
function adam_tweaks_init() {
dpm('hello');
dpm(comment_load(385));
dpm(comment_load(500));
  dpm(adam_tweaks_comment_fastdelete_link(500));
}
*/


/**
 * Implements hook_token_info_alter()
 */
function adam_tweaks_token_info_alter(&$data) {
  $data['tokens']['comment']['comment_fastdelete_link'] = array(
    'name' => t("Comment Delete Link"),
    'description' => t("A link to immediately delete a comment."), 
  );
}

/**
 * Implements hook_tokens()
 *
 * @param string $type
 * @param array $tokens
 * @param array $data
 * @param array $options
 * @return array Returns the replacement tokens as a keyed array.
 */
function adam_tweaks_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'comment') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'comment_fastdelete_link':
          $cid = $data['comment']->cid;
          $link = adam_tweaks_comment_fastdelete_link($cid);
          if (isset($cid)) {
            $replacements[$original] = $link;
          }
          else {
            $replacements[$original] = '';
          }
          break;
      }
    }
  }
  return $replacements;
}

/**
 * Implements hook_comment_insert()
 */
function adam_tweaks_comment_insert($comment) {
  // Allow this only on node 42 for anon users
  $link = adam_tweaks_comment_fastdelete_link($comment->cid);
  if ($comment->nid == 42) {
    drupal_set_message(t('You have 24 hours to delete this comment. If you want to delete it use this deletion link: !url', array('!url' => l($link, $link))));
  }
}


/**
 * Implements hook_permission().
 */
function adam_tweaks_permission() {
  return array(
    'administer adam tweaks' => array(
      'title' => t('Administer Adam Tweaks'), 
      'description' => t('Perform administration tasks for the Tweaks module.'),
    ),
  );
}
